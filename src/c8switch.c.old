#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
#include <time.h>
#include <curses.h>
#include <unistd.h>

int main(int argc, char* argv[]) {
	if (argc == 0) {
		fprintf(stderr, "usage: %s [rom]\n", argv[0]);
		return 1;
	}
	uint16_t op = 0;;
	uint8_t m[4096];
	uint8_t V[16];
	uint16_t I = 0;
	uint16_t pc = 0x200;
	uint8_t g[2048];
	uint8_t dt = 0;
	uint8_t st = 0;
	uint16_t s[16];
	uint16_t sp = 0;
	uint8_t k[16];
	bool df = 1;
	// fontset
	uint8_t fs[80] = {
		0xF0, 0x90, 0x90, 0x90, 0xF0, //0
		0x20, 0x60, 0x20, 0x20, 0x70, //1
		0xF0, 0x10, 0xF0, 0x80, 0xF0, //2
		0xF0, 0x10, 0xF0, 0x10, 0xF0, //3
		0x90, 0x90, 0xF0, 0x10, 0x10, //4
		0xF0, 0x80, 0xF0, 0x10, 0xF0, //5
		0xF0, 0x80, 0xF0, 0x90, 0xF0, //6
		0xF0, 0x10, 0x20, 0x40, 0x40, //7
		0xF0, 0x90, 0xF0, 0x90, 0xF0, //8
		0xF0, 0x90, 0xF0, 0x10, 0xF0, //9
		0xF0, 0x90, 0xF0, 0x90, 0x90, //A
		0xE0, 0x90, 0xE0, 0x90, 0xE0, //B
		0xF0, 0x80, 0x80, 0x80, 0xF0, //C
		0xE0, 0x90, 0x90, 0x90, 0xE0, //D
		0xF0, 0x80, 0xF0, 0x80, 0xF0, //E
		0xF0, 0x80, 0xF0, 0x80, 0x80  //F	
	};
	// ncurses init
	initscr();
	noecho();
	cbreak();
	curs_set(0);
	nodelay(stdscr, 1);
	// clear display
	for(int i = 0; i < 2048; ++i)
		g[i] = 0;
	// clear other things
	for(int i = 0; i < 16; ++i) {
		k[i] = 0;
		V[i] = 0;
		s[i] = 0;
	}
	// clear memory
	for(int i = 0; i < 4096; ++i)
		m[i] = 0;
	// load fontset
	for(int i = 0; i < 80; i++)
		m[i] = fs[i];
	srand(time(NULL));
	// load game
	FILE* fp = fopen(argv[1], "rb");
	if (!fp) {
		endwin();
		fprintf(stderr, "File \"%s\" not found\n", argv[1]);
		return 1;
	}
	fseek(fp, 0, SEEK_END);
	uint32_t fsize = ftell(fp);
	if (fsize > (3584)) {
		endwin();
		fprintf(stderr, "Invalid rom. %d bytes > 3584\n", fsize);
		return 1;
	}
	rewind(fp);
	char* b = (char*) malloc(fsize);
	if (!b) {
		endwin();
		fprintf(stderr, "Failed to allocate %d bytes\n", fsize);
		return 1;
	}
	if (fread(b, 1, fsize, fp) != fsize) {
		endwin();
		fprintf(stderr, "Error eading file\n");
		return 1;
	}
	for(int i = 0; i < fsize; ++i)
		m[i + 512] = b[i];
	fclose(fp);
	free(b);
	for(;;) {
		// If you think this switch statement is too big, don't scroll down
		switch (getch()) {
			case '1':
				k[0x1] = 1;
				break;
			case '2':
				k[0x2] = 1;
				break;
			case '3':
				k[0x3] = 1;
				break;
			case '4':
				k[0xC] = 1;
				break;
			case 'q':
				k[0x4] = 1;
				break;
			case 'w':
				k[0x5] = 1;
				break;
			case 'f':
				k[0x6] = 1;
				break;
			case 'p':
				k[0xD] = 1;
				break;
			case 'a':
				k[0x7] = 1;
				break;
			case 'r':
				k[0x8] = 1;
				break;
			case 's':
				k[0x9] = 1;
				break;
			case 't':
				k[0xE] = 1;
				break;
			case 'z':
				k[0xA] = 1;
				break;
			case 'x':
				k[0x0] = 1;
				break;
			case 'c':
				k[0xB] = 1;
				break;
			case 'v':
				k[0xF] = 1;
				break;
		}
		op = m[pc] << 8 | m[pc + 1];
		//fprintf(stderr, "%X\n", op);
		// WELCOME TO HELL (depending on your window size)
		switch (op & 0xF000) {
			case 0x0000:
				switch (op & 0x000F) {
					case 0x0000: // 0x00E0: clear screen
						for (int i = 0; i < 2048; ++i)
							g[i] = 0;
						df = 1;
						pc += 2;
						break;
					case 0x000E: // 0x00EE: return from sub
						--sp;
						pc = s[sp];
						pc += 2;
						break;
					default:
						endwin();
						fprintf(stderr, "Unknown opcode: %X\n", op);
						return 1;
				}
				break;
			case 0x1000: // 0x1NNN: jump to NNN
				pc = op & 0x0FFF;
				break;
			case 0x2000: // 0x2NNN: call sub at NNN
				s[sp] = pc;
				++sp;
				pc = op & 0x0FFF;
				break;
			case 0x3000: // 0x3XNN: skip one if VX == NN
				if (V[(op & 0x0F00) >> 8] == (op & 0x00FF))
					pc += 4;
				else
					pc += 2;
				break;
			case 0x4000: // 0x4XNN: skip one if VX != NN
				if (V[(op & 0x0F00) >> 8] != (op & 0x00FF))
					pc += 4;
				else
					pc += 2;
				break;
			case 0x5000: // 0x5XY0: skip one if VX == VY
				if (V[(op & 0x0F00) >> 8] == V[(op & 0x00F0) >> 4])
					pc += 4;
				else
					pc += 2;
				break;
			case 0x6000: // 0x6XNN: VX = NN
				V[(op & 0x0F00) >> 8] = op & 0x00FF;
				pc += 2;
				break;
			case 0x7000: // 0x7XNN: add NN to VX
				V[(op & 0x0F00) >> 8] += op & 0x00FF;
				pc += 2;
				break;
			case 0x8000:
				switch (op & 0x000F) {
					case 0x0000: // 0x8XY0: VX = VY
						V[(op & 0x0F00) >> 8] = V[(op & 0x00F0) >> 4];
						pc += 2;
						break;
					case 0x0001: // 0x8XY1: VX |= VY
						V[(op & 0x0F00) >> 8] |= V[(op & 0x00F0) >> 4];
						pc += 2;
						break;
					case 0x0002: // 0x8XY2: VX &= VY
						V[(op & 0x0F00) >> 8] &= V[(op & 0x00F0) >> 4];
						pc += 2;
						break;
					case 0x0003: // 0x8XY3: VX ^= VY
						V[(op & 0x0F00) >> 8] ^= V[(op & 0x00F0) >> 4];
						pc += 2;
						break;
					case 0x0004: // 0x8XY4: VX += VY with carry
						if (V[(op & 0x00F0) >> 4] > 0xFF - V[(op & 0x0F00) >> 8])
							V[0xF] = 1; // carry
						else
							V[0xF] = 0;
						V[(op & 0x0F00) >> 8] += V[(op & 0x00F0) >> 4];
						pc += 2;
						break;
					case 0x0005: // 0x8XY5: VX -= VY with borrow
						if (V[(op & 0x00F0) >> 4] > V[(op & 0x0F00) >> 8])
							V[0xF] = 0; // borrow
						else
							V[0xF] = 1;
						V[(op & 0x0F00) >> 8] -= V[(op & 0x00F0) >> 4];
						pc += 2;
						break;
					case 0x0006: // 0x8XY6: VF = VX & 0x1; VX >>= 1
						V[0xF] = V[(op & 0x0F00) >> 8] & 0x1;
						V[(op & 0x0F00) >> 8] >>= 1;
						pc += 2;
						break;
					case 0x0007: // 0x8XY7: VX = VY - VX with borrow
						if (V[(op & 0x0F00) >> 8] > V[(op & 0x00F0) >> 4])
							V[0xF] = 0; // borrow
						else
							V[0xF] = 1;
						V[(op & 0x0F00) >> 8] = V[(op & 0x00F0) >> 4] - V[(op & 0x0F00) >> 8];
						pc += 2;
						break;
					case 0x000E: // 0x8XYE: VF = VX & 0x80; VX <<= 1
						V[0xF] = V[(op & 0x0F00) >> 8] >> 7;
						V[(op & 0x0F00) >> 8] <<= 1;
						pc += 2;
						break;
					default:
						endwin();
						fprintf(stderr, "Unknown opcode: %X\n", op);
						return 1;
				}
				break;
			case 0x9000: // 0x9XY0: skip one if VX != VY
				if (V[(op & 0x0F00) >> 8] != V[(op & 0x00F0) >> 4])
					pc += 4;
				else
					pc += 2;
				break;
			case 0xA000: // 0xANNN: I = NNN
				I = op & 0x0FFF;
				pc += 2;
				break;
			case 0xB000: // 0xBNNN: jump to NNN + V0
				pc = (op & 0x0FFF) + V[0];
				break;
			case 0xC000: // 0xCXNN: VX = rand() & NN
				V[(op & 0x0F00) >> 8] = (rand() % 0xFF) & (op & 0x00FF);
				pc += 2;
				break;
			case 0xD000: // 0xDXYN: place a height N sprite at VX, VY; set df if a pixel is turned off
				{
					uint16_t x = V[(op & 0x0F00) >> 8];
					uint16_t y = V[(op & 0x00F0) >> 4];
					V[0xF] = 0;
					for (int i = 0; i < (op & 0x000F); ++i) {
						uint16_t r = m[I + i];
						for(int j = 0; j < 8; ++j) {
							if ((r & (0x80 >> j)) != 0) {
								if (g[x + j + (y + i) * 64] == 1)
									V[0xF] = 1;                                    
								g[x + j + (y + i) * 64] ^= 1;
							}
						}
					}
					df = 1;
					pc += 2;
				}
				break;
			case 0xE000:
				switch (op & 0x00FF) {
					case 0x009E: // 0xEX9E: skip one if key VX pressed
						if (k[V[(op & 0x0F00) >> 8]] != 0)
							pc += 4;
						else
							pc += 2;
						break;
					case 0x00A1: // 0xEXA1: skip one if key VX isn't pressed
						if (k[V[(op & 0x0F00) >> 8]] == 0)
							pc += 4;
						else
							pc += 2;
						break;
					default:
						endwin();
						fprintf(stderr, "Unknown opcode: %X\n", op);
						return 1;
				}
				break;
			case 0xF000:
				switch (op & 0x00FF) {
					case 0x0007: // 0xFX07: VX = dt
						V[(op & 0x0F00) >> 8] = dt;
						pc += 2;
						break;
					case 0x000A: // 0xFXOA: pause; VX = input
						{
							for (int i = 0; i < 16; ++i) {
								if (k[i] == 1) {
									V[(op & 0x0F00) >> 8] = i;
									pc += 2;
									break;
								}
							}
						}
						break;
					case 0x0015: // 0xFX15: dt = VX
						dt = V[(op & 0x0F00) >> 8];
						pc += 2;
						break;
					case 0x0018: // 0xFX18: st = VX
						st = V[(op & 0x0F00) >> 8];
						pc += 2;
						break;
					case 0x001E: // 0xFX1E: I += VX with carry
						if (I + V[(op & 0x0F00) >> 8] > 0xFFF)
							V[0xF] = 1;
						else
							V[0xF] = 0;
						I += V[(op & 0x0F00) >> 8];
						pc += 2;
						break;
					case 0x0029: // 0xFX29: I = mem location of sprite for char X
						I = V[(op & 0x0F00) >> 8] * 0x5;
						pc += 2;
						break;
					case 0x0033: // 0xFX33: m[i + 0-2] = BCD VX
						m[I] = V[(op & 0x0F00) >> 8] / 100;
						m[I + 1] = V[(op & 0x0F00) >> 8] / 10 % 10;
						m[I + 2] = V[(op & 0x0F00) >> 8] % 100 % 10;
						pc += 2;
						break;
					case 0x0055: // 0xFX55: m[I + 0-X] = V0-VX; I += X + 1
						for (int i = 0; i <= ((op & 0x0F00) >> 8); ++i)
							m[I + i] = V[i];
						I += ((op & 0x0F00) >> 8) + 1;
						pc += 2;
						break;
					case 0x0065: // 0xFX65: V0-VX = m[I + 0-X]; I += X + 1
						for (int i = 0; i <= ((op & 0x0F00) >> 8); ++i)
							V[i] = m[I + 1];
						I += ((op & 0x0F00) >> 8) + 1;
						pc += 2;
						break;
					default:
						endwin();
						fprintf(stderr, "Unknown opcode: %X\n", op);
						return 1;
				}
				break;
			default:
				endwin();
				fprintf(stderr, "Unknown opcode: %X\n", op);
				return 1;
		}
		for (int i = 0; i < 16; ++i)
			k[i] = 0;
		// timers
		if (dt > 0)
			--dt;
		if (st == 1)
			beep();
		if (st > 0)
			--st;
		// print frame
		erase();
		move(0, 0);
		for (int i = 0; i < 32; ++i) {
			for (int j = 0; j < 64; ++j) {
				if (g[i * 64 + j] == 1)
					attron(A_STANDOUT);
				if (COLS >= 128)
					printw("  ");
				else
					printw(" ");
				attroff(A_STANDOUT);
			}
			printw("\n");
		}
		if (df) {
			refresh();
			df = 0;
		}
		if (argc == 3)
			sleep(1);
		else
			usleep(16667);
	}
	return 0;
}
